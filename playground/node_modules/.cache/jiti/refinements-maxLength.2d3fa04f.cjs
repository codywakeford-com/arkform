"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MaxLengthNode = exports.MaxLength = void 0;var _disjoint = require("../shared/disjoint.js");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _toJsonSchema = require("../shared/toJsonSchema.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "maxLength",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {
      parse: (0, _range.createLengthRuleParser)("maxLength")
    }
  },
  reduce: (inner, $) => inner.rule === 0 ? $.node("exactLength", inner) : undefined,
  normalize: (0, _range.createLengthSchemaNormalizer)("maxLength"),
  defaults: {
    description: (node) => `at most length ${node.rule}`,
    actual: (data) => `${data.length}`
  },
  intersections: {
    maxLength: (l, r) => l.isStricterThan(r) ? l : r,
    minLength: (max, min, ctx) => max.overlapsRange(min) ?
    max.overlapIsUnit(min) ?
    ctx.$.node("exactLength", { rule: max.rule }) :
    null :
    _disjoint.Disjoint.init("range", max, min)
  }
});
class MaxLengthNode extends _range.BaseRange {
  impliedBasis = _registry.$ark.intrinsic.lengthBoundable.internal;
  traverseAllows = (data) => data.length <= this.rule;
  reduceJsonSchema(schema) {
    switch (schema.type) {
      case "string":
        schema.maxLength = this.rule;
        return schema;
      case "array":
        schema.maxItems = this.rule;
        return schema;
      default:
        return _toJsonSchema.ToJsonSchema.throwInternalOperandError("maxLength", schema);
    }
  }
}exports.MaxLengthNode = MaxLengthNode;
const MaxLength = exports.MaxLength = {
  implementation,
  Node: MaxLengthNode
}; /* v9-edffbffb430d5eb8 */
