"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MinLengthNode = exports.MinLength = void 0;var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _toJsonSchema = require("../shared/toJsonSchema.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "minLength",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {
      parse: (0, _range.createLengthRuleParser)("minLength")
    }
  },
  reduce: (inner) => inner.rule === 0 ?
  // a minimum length of zero is trivially satisfied
  _registry.$ark.intrinsic.unknown :
  undefined,
  normalize: (0, _range.createLengthSchemaNormalizer)("minLength"),
  defaults: {
    description: (node) => node.rule === 1 ? "non-empty" : `at least length ${node.rule}`,
    // avoid default message like "must be non-empty (was 0)"
    actual: (data) => data.length === 0 ? "" : `${data.length}`
  },
  intersections: {
    minLength: (l, r) => l.isStricterThan(r) ? l : r
  }
});
class MinLengthNode extends _range.BaseRange {
  impliedBasis = _registry.$ark.intrinsic.lengthBoundable.internal;
  traverseAllows = (data) => data.length >= this.rule;
  reduceJsonSchema(schema) {
    switch (schema.type) {
      case "string":
        schema.minLength = this.rule;
        return schema;
      case "array":
        schema.minItems = this.rule;
        return schema;
      default:
        return _toJsonSchema.ToJsonSchema.throwInternalOperandError("minLength", schema);
    }
  }
}exports.MinLengthNode = MinLengthNode;
const MinLength = exports.MinLength = {
  implementation,
  Node: MinLengthNode
}; /* v9-e351c4bae1ede707 */
