"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _baseFlatten = _interopRequireDefault(require("./_baseFlatten.js"));
var _baseIteratee = _interopRequireDefault(require("./_baseIteratee.js"));
var _baseRest = _interopRequireDefault(require("./_baseRest.js"));
var _baseUniq = _interopRequireDefault(require("./_baseUniq.js"));
var _isArrayLikeObject = _interopRequireDefault(require("./isArrayLikeObject.js"));
var _last = _interopRequireDefault(require("./last.js"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
var unionBy = (0, _baseRest.default)(function (arrays) {
  var iteratee = (0, _last.default)(arrays);
  if ((0, _isArrayLikeObject.default)(iteratee)) {
    iteratee = undefined;
  }
  return (0, _baseUniq.default)((0, _baseFlatten.default)(arrays, 1, _isArrayLikeObject.default, true), (0, _baseIteratee.default)(iteratee, 2));
});var _default = exports.default =

unionBy; /* v9-9be5877bd9ab4fb0 */
