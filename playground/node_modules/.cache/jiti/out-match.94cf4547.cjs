"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.throwOnDefault = exports.doubleAtMessage = exports.chainedAtMessage = exports.InternalMatchParser = exports.InternalChainedMatchParser = void 0;var _schema = require("@ark/schema");
var _util = require("@ark/util");
class InternalMatchParser extends _util.Callable {
  $;
  constructor($) {
    super((...args) => new InternalChainedMatchParser($)(...args), {
      bind: $
    });
    this.$ = $;
  }
  in(def) {
    return new InternalChainedMatchParser(this.$, def === undefined ? undefined : this.$.parse(def));
  }
  at(key, cases) {
    return new InternalChainedMatchParser(this.$).at(key, cases);
  }
  case(when, then) {
    return new InternalChainedMatchParser(this.$).case(when, then);
  }
}exports.InternalMatchParser = InternalMatchParser;
class InternalChainedMatchParser extends _util.Callable {
  $;
  in;
  key;
  branches = [];
  constructor($, In) {
    super((cases) => this.caseEntries(Object.entries(cases).map(([k, v]) => k === "default" ? [k, v] : [this.$.parse(k), v])));
    this.$ = $;
    this.in = In;
  }
  at(key, cases) {
    if (this.key)
    (0, _util.throwParseError)(doubleAtMessage);
    if (this.branches.length)
    (0, _util.throwParseError)(chainedAtMessage);
    this.key = key;
    return cases ? this.match(cases) : this;
  }
  case(def, resolver) {
    return this.caseEntry(this.$.parse(def), resolver);
  }
  caseEntry(node, resolver) {
    const wrappableNode = this.key ? this.$.parse({ [this.key]: node }) : node;
    const branch = wrappableNode.pipe(resolver);
    this.branches.push(branch);
    return this;
  }
  match(cases) {
    return this(cases);
  }
  strings(cases) {
    return this.caseEntries(Object.entries(cases).map(([k, v]) => k === "default" ?
    [k, v] :
    [this.$.node("unit", { unit: k }), v]));
  }
  caseEntries(entries) {
    for (let i = 0; i < entries.length; i++) {
      const [k, v] = entries[i];
      if (k === "default") {
        if (i !== entries.length - 1) {
          (0, _util.throwParseError)(`default may only be specified as the last key of a switch definition`);
        }
        return this.default(v);
      }
      if (typeof v !== "function") {
        return (0, _util.throwParseError)(`Value for case "${k}" must be a function (was ${(0, _util.domainOf)(v)})`);
      }
      this.caseEntry(k, v);
    }
    return this;
  }
  default(defaultCase) {
    if (typeof defaultCase === "function")
    this.case(_schema.intrinsic.unknown, defaultCase);
    const schema = {
      branches: this.branches,
      ordered: true
    };
    if (defaultCase === "never" || defaultCase === "assert")
    schema.meta = { onFail: throwOnDefault };
    const cases = this.$.node("union", schema);
    if (!this.in)
    return this.$.finalize(cases);
    let inputValidatedCases = this.in.pipe(cases);
    if (defaultCase === "never" || defaultCase === "assert") {
      inputValidatedCases = inputValidatedCases.configureReferences({
        onFail: throwOnDefault
      }, "self");
    }
    return this.$.finalize(inputValidatedCases);
  }
}exports.InternalChainedMatchParser = InternalChainedMatchParser;
const throwOnDefault = (errors) => errors.throw();exports.throwOnDefault = throwOnDefault;
const chainedAtMessage = exports.chainedAtMessage = `A key matcher must be specified before the first case i.e. match.at('foo') or match.in<object>().at('bar')`;
const doubleAtMessage = exports.doubleAtMessage = `At most one key matcher may be specified per expression`; /* v9-a3c8943f06d477c9 */
