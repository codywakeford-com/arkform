"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.useFirebase = void 0;var _pinia = await jitiImport("pinia");





var _app = await jitiImport("firebase/app");
var _auth = await jitiImport("firebase/auth");
var _firestore = await jitiImport("firebase/firestore");


var _useArkform = await jitiImport("../composables/useArkform");
var _arktype = await jitiImport("arktype");











const FirebaseConfigSchema = (0, _arktype.type)({
  apiKey: "string",
  authDomain: "string",
  projectId: "string",
  storageBucket: "string",
  messagingSenderId: "string",
  appId: "string",
  "measurementId?": "string"
});

const useFirebase = exports.useFirebase = (0, _pinia.defineStore)("firebaseStore", () => {
  const emulatorsRunning = ref(false);
  const app = ref();
  const auth = ref();
  const storage = ref();
  const firestore = ref();
  const functions = ref();
  const user = ref();

  const init = () => {
    const $arkform = (0, _useArkform.useArkForm)();
    const arkfireConfig = $arkform.config.value.arkfire;
    if (!arkfireConfig?.enabled) return;

    const firebaseConfig = useRuntimeConfig().public.firebaseConfig;

    if (!checkFirebaseConfig(firebaseConfig)) {
    }

    app.value = (0, _app.initializeApp)(firebaseConfig);
    auth.value = (0, _auth.getAuth)(app.value);
    firestore.value = (0, _firestore.getFirestore)(app.value);

    // Watch for auth state changes
    (0, _auth.onAuthStateChanged)(auth.value, (firebaseUser) => {
      user.value = firebaseUser;
    });

    handleEmulators();
    checkHealth();
  };

  return { app, emulatorsRunning, auth, firestore, storage, functions, init };
});

function checkHealth() {
  return;
  const firebase = useFirebase();
  const failed = [];

  for (const [key, value] of Object.entries(firebase)) {
    if (!value) {
      failed.push(key);
    }
  }

  if (failed.length > 0) {
    for (const item of failed) {
      console.debug(`%c [arkfire] Firebase module '${item}' failed to initialize.`, "color: orange;");
    }
  }

  const ports = (0, _useArkform.useArkForm)().config.value.arkfire.ports;

  console.group("[arkfire]: Emulators connected.");
  console.log(`Auth running locally on port ${ports.auth}`), console.log(`Firestore running locally on port ${ports.firestore}`), console.groupEnd();
}

async function handleEmulators() {
  let { auth, db, emulatorsRunning } = useFirebase(); // Pinia store
  const $arkform = (0, _useArkform.useArkForm)(); // Retrieve form config
  const arkfireConfig = $arkform.config.value.arkfire;
  const ports = arkfireConfig.ports;
  const dev = process.env.NODE_ENV === "development";

  if (!auth || !db) {
    console.warn("[arkfire] Firebase modules 'auth' or 'db' are not initialized.");
    return;
  }

  if (dev) {
    try {
      (0, _auth.connectAuthEmulator)(auth, `http://localhost:${ports.auth}`, { disableWarnings: true });
      (0, _firestore.connectFirestoreEmulator)(db, "localhost", ports.firestore);

      emulatorsRunning = true;
      console.debug("[arkfire] Firebase emulators connected.");
    } catch (error) {
      console.error("[arkfire] Failed to connect Firebase emulators:", error);
    }
  }

  if (dev && !emulatorsRunning) {
    console.warn("[arkfire] ⚠️ Firebase emulators are NOT connected in development mode. Run firebase emulators:start");
  }
}

function checkFirebaseConfig(config) {
  let out = FirebaseConfigSchema(config);

  if (out instanceof _arktype.type.errors) {
    console.warn("[firebase]: To use arkfire, provide your firebase config object in your public runtimeConfig.\n" + "runtimeConfig: {\n" + "  public: {\n" + "    firebaseConfig: {\n" + `        apiKey: "..." \n` + `        authDomain: "..."  \n` + `        projectId: "..."  \n` + `        storageBucket: "..." \n` + `        messagingSenderId: "..." \n` + `        appId: "..." \n` + `        measurementId?: "..." \n` + "    }\n" + "  }\n" + "}\n" + "This should be placed in the `nuxt.config.ts` file in the runtimeConfig section.");
    return null;
  }

  return config;
} /* v9-29b30df2d5c15c5f */
