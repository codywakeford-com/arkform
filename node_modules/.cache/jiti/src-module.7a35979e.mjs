"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _kit = await jitiImport("@nuxt/kit");









var fs = _interopRequireWildcard(await jitiImport("fs"));
var _nodeFs = await jitiImport("node:fs");
var _nodePath = await jitiImport("node:path");

var _config = await jitiImport("./runtime/controllers/config.controller");function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;} // import config from "../playground/arkform.config"




// Module options TypeScript interface definition
var _default = exports.default =

(0, _kit.defineNuxtModule)({
  meta: {
    name: "arkform",
    configKey: "arkform"
  },

  defaults: {},

  async setup(options, _nuxt) {
    const resolver = (0, _kit.createResolver)("file:///home/cody/git/monorepo/libs/arkform/src/module.ts");
    await (0, _kit.installModule)("@pinia/nuxt");

    // Give permission for local module //
    _nuxt.options.vite ??= {};
    _nuxt.options.vite.server ??= {};
    _nuxt.options.vite.server.fs ??= {};
    _nuxt.options.vite.server.fs.allow ??= [];
    _nuxt.options.vite.server.fs.allow.push(resolver.resolve(__dirname, ".."));

    // Load arkformConfig
    const arkformConfigPath = (0, _nodePath.resolve)(_nuxt.options.rootDir, "arkform.config.ts");

    let userConfig = {};

    if ((0, _nodeFs.existsSync)(arkformConfigPath)) {
      userConfig = await ((specifier) => new Promise((r) => r(`${specifier}`)).then((s) => jitiImport(s).then((m) => _interopRequireWildcard(m))))(arkformConfigPath).then((m) => m.default);
    } else {
      console.warn(
        `[arkform] No arkform.config.ts found at ${arkformConfigPath}. Using default configuration.`
      );
    }

    const $arkformConfig = (0, _config.defineArkformConfig)(userConfig);

    if ($arkformConfig.value.arkfire?.enabled) {
      _nuxt.hook("imports:dirs", (dirs) => {
        dirs.push((0, _nodePath.resolve)(__dirname, "runtime/arkfire"));
      });

      (0, _kit.addPlugin)({
        src: resolver.resolve("./runtime/plugins/initFirebase"),
        mode: "all",
        order: -100 // lower runs earlier
      });
    }

    let firebaseConfig;
    try {
      const raw = fs.readFileSync(
        resolver.resolve(_nuxt.options.rootDir, "firebase.json"),
        "utf-8"
      );
      firebaseConfig = JSON.parse(raw);
      console.log("[module]: Firebase config loaded:", firebaseConfig);

      _nuxt.options.runtimeConfig.public.firebase = {
        emulators: firebaseConfig.emulators
      };
    } catch (err) {
      console.error("[module]: Failed to read firebase.json:", err);
    }

    // setup features
    const features = userConfig?.features ?? {};

    // if (features.tasks) {
    if (true) {
      (0, _kit.addServerHandler)({
        route: "/api/_arkfire/tasks/create",
        handler: resolver.resolve("./runtime/server/api/_arkfire/tasks/create.post.ts")
      });
    }

    // Setup theme dir
    const themeDir = resolver.resolve(
      _nuxt.options.rootDir,
      $arkformConfig?.value?.root || "./arkform"
    );

    if ((0, _nodeFs.existsSync)(themeDir)) {
      addCssFilesFromDir(themeDir, _nuxt);
      addCssFilesFromDir;
      _nuxt.options.watch.push(themeDir);
      _nuxt.options.alias["#arkform-theme"] = themeDir;
    } else {
      console.warn(`[arkform] Theme directory ${themeDir} does not exist.`);
    }

    (0, _kit.addPlugin)({
      src: resolver.resolve("./runtime/plugins/pinia"),
      mode: "all",
      order: -100 // lower runs earlier
    });

    (0, _kit.addComponentsDir)({
      path: resolver.resolve(__dirname, "runtime/components")
    });

    const runtimeDirs = [
    "composables",
    "types",
    "stores",
    "controllers",
    "services/$env.ts",
    "services/$bus.ts",
    "services/$tasks.ts",
    "services/$modal.ts"];


    for (const dir of runtimeDirs) {
      const a = resolver.resolve("runtime", __dirname, dir);

      _nuxt.options.watch.push(a);
      (0, _kit.addImportsDir)(a);
    }

    console.log("\x1b[38;2;255;85;0mðŸ”¥ [arkform] Installed\x1b[0m");
  }
});

function addCssFilesFromDir(directory, _nuxt) {
  const files = fs.readdirSync(directory);

  files.forEach((file) => {
    const filePath = (0, _nodePath.resolve)(directory, file);
    const stat = fs.statSync(filePath);

    // console.log("resolving", filePath)

    if (stat.isDirectory()) {
      addCssFilesFromDir(filePath, _nuxt);
    } else if (file.endsWith(".css") || file.endsWith(".scss")) {
      _nuxt.options.css.push(filePath);
    }
  });
} /* v9-246013e4dc45f08d */
