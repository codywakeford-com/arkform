"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.getInputIdsFromId = getInputIdsFromId;exports.getInputsFromId = getInputsFromId;exports.useArkForm = useArkForm;var _config = await jitiImport("../controllers/config.controller");

var _getInputByName = await jitiImport("../services/utils/getInputByName");
var _uuid = await jitiImport("../services/utils/uuid");
var _validateInput = await jitiImport("../services/validation/validateInput");
var _forms = await jitiImport("../stores/forms");
var _useBus = await jitiImport("./useBus");
var _vue = await jitiImport("vue");
































function useArkForm() {
  let $arkform = {
    useInput(id) {
      const $forms = (0, _forms.useArkFormStore)();
      const { type, formId, groupId, inputId } = (0, _uuid.getIdsFromId)(id);

      if (type !== "input" || !formId || !inputId) {
        throw new Error(`useInput(): Invalid ID type or structure for "${id}"`);
      }

      const form = $forms.state[formId];
      if (!form) throw new Error(`useInput(): Form "${formId}" not found for "${id}"`);

      const input = groupId ? form.groups?.[groupId]?.inputs?.[inputId] : form.inputs?.[inputId];

      if (!input) {
        throw new Error(`useInput(): Input "${inputId}" not found in form "${formId}"`);
      }

      return toRefs(input);
    },

    useForm(id) {
      const $forms = (0, _forms.useArkFormStore)();

      const { type, formId } = (0, _uuid.getIdsFromId)(id);

      if (type !== "form" || !formId) {
        throw new Error(`useForm(): Invalid ID structure for "${id}"`);
      }

      const form = $forms.state[formId];

      if (!form) {
        throw new Error(`useForm(): Form "${formId}" not found`);
      }

      const inputs = form.inputs;

      const names = computed(() => {
        return Object.entries(inputs).map(([id, input]) => {
          return {
            name: input.name,
            id: id
          };
        });
      });

      const errors = computed(() => {
        return Object.values(inputs).flatMap((input) => input.errors);
      });

      // const value = computed(() => {
      //     const result: Record<string, any> = {}

      //     Object.values(inputs).forEach((input: any) => {
      //         const val = input.value ? input.value : null

      //         result[input.name] = val
      //     })

      //     return result
      // })

      const valid = computed(() => {
        if (Object.values(inputs).every((input) => !input.checked)) {
          return null;
        }

        return Object.values(inputs).every((input) => input.valid);
      });

      const makeValueRefs = () => {
        const refs = {};

        Object.entries(inputs).forEach(([inputId, input]) => {
          let inputRef = {};
          inputRef[input.name.value] = toRef(input.value);

          refs[input.name] = input.value;
        });

        return reactive(refs);
      };

      const value = makeValueRefs();

      const validated = computed(() => {
        return valid.value ? value : null;
      });

      const out = {
        ...toRefs($forms.state[formId]),
        names,
        errors,
        validated,
        value,
        valid
      };

      return out;
    },

    useGroup(id) {
      const $forms = (0, _forms.useArkFormStore)();

      const { type, groupId, formId } = (0, _uuid.getIdsFromId)(id);

      if (type !== "group" || !groupId || !formId) {
        throw new Error(`useGroup(): Invalid ID structure for "${id}", this is not a valid group ID.`);
      }

      const form = $forms.state[formId];

      if (!form) {
        throw new Error(`useGroup(): Form "${formId}" not found for group "${groupId}"`);
      }

      const group = $forms.state[formId].groups[groupId];

      if (!group) {
        throw new Error(`useGroup(): Group "${groupId}" not found in form "${formId}"`);
      }

      const inputs = $forms.state[formId].groups[groupId].inputs;

      const names = computed(() => {
        return Object.values(inputs).map((input) => input.name);
      });

      const errors = computed(() => {
        return Object.values(inputs).flatMap((input) => input.errors);
      });

      const valid = computed(() => {
        if (Object.values(inputs).every((input) => !input.checked)) {
          return null;
        }

        return Object.values(inputs).every((input) => input.valid);
      });

      const value = computed(() => {
        const result = {};

        Object.values(inputs).forEach((input) => {
          result[input.name] = input.value;
        });

        return result;
      });

      const validated = computed(() => {
        return valid.value ? value.value : null;
      });

      const out = {
        ...toRefs($forms.state[formId].groups[groupId]),
        names,
        value,
        errors,
        validated,
        valid
      };

      return out;
    },

    clearInputs: (id) => {
      const bus = (0, _useBus.useBus)();

      const inputIds = getInputIdsFromId(id);

      inputIds.forEach((id) => {
        const input = $arkform.useInput(id);

        input.valid.value = null;
        input.value.value = input.default.value;

        bus.emit(`input-${id}:update`, input);
      });
    },

    clearErrors: (id) => {
      const $forms = (0, _forms.useArkFormStore)();

      const inputIds = getInputIdsFromId(id);

      inputIds.forEach((id) => {
        const input = $arkform.useInput(id);

        input.errors.value = [];
      });
    },

    reset: (id) => {
      $arkform.clearErrors(id);
      $arkform.clearInputs(id);
    },

    validate(id) {
      if (!id) {
        console.error(`[$arkform.validate]: id is invalid (${id})`);
        return null;
      }

      const formId = (0, _getInputByName.getFormIdByName)({ name: id });
      const inputIds = getInputIdsFromId(formId || id);

      let valid = true;

      inputIds.forEach((id) => {
        if (!(0, _validateInput.validateInput)({ id })) {
          valid = false;
        }
      });

      if (valid) {
        return $arkform.useForm(formId).validated.value;
      } else {
        return null;
      }
    },

    form: {
      submit: (id) => {
        if (!id) return;

        const bus = (0, _useBus.useBus)();
        bus.emit(`form-${id}:submit`);
      },

      toggleReadonly: (id) => {
        if (!id) return;
        const form = $arkform.useForm(id);
        form.readOnly.value = !form.readOnly.value;
        console.log(form.readOnly.value);
      },

      set: (id, data) => {
        console.log("hello from $arkform.form.set");
        const inputIds = getInputIdsFromId(id);

        inputIds.forEach((id) => {
          const input = $arkform.useInput(id);

          if (input.name.value in data) {
            console.log(data[input.name.value]);
            input.value.value = data[input.name.value];
          }
        });
      }
    },

    group: {
      add: (id, clearInputs = true) => {
        const group = $arkform.useGroup(id);

        if ($arkform.validate(id)) {
          group.items.value.push(group.value.value);

          const inputIds = getInputIdsFromId(id);

          if (clearInputs) {
            inputIds.forEach((id) => {
              const input = $arkform.useInput(id);

              input.value.value = input.default.value;
            });
          }
        }
      },
      remove: (id, index) => {
        const group = $arkform.useGroup(id);
        group.items.value.splice(index, 1);
      }
    },

    config: (0, _vue.ref)(_config.arkConfigDefaults),

    message: {
      set: (name, message) => {
        const messageGroup = $arkform.useMessageSet(name);

        if (!messageGroup.value) {
          console.warn(`[arkform]: Cannot set value undefined <ark-message-group /> with name (${name}).`);
        }

        messageGroup.value.push(message);
      },

      clear: (name) => {
        const messageSet = $arkform.useMessageSet(name);
        messageSet.value.splice(0, messageSet.value.length);
      }
    },

    useMessageSet(name) {
      const $forms = (0, _forms.useArkFormStore)();
      const messageGroups = $forms.messages;

      const messageGroup = messageGroups[name];

      if (!messageGroup) {
        throw new Error(`[Arkform]: Cannot set <ark-message-group /> with name (${name}).`);
      }

      return toRef(messageGroup);
    },

    state: () => {
      const $forms = (0, _forms.useArkFormStore)();
      return $forms.state;
    }
  };

  return $arkform;
}

function getInputsFromId(id) {
  return computed(() => {
    const $arkform = useArkForm();

    const { type, formId, groupId, inputId } = (0, _uuid.getIdsFromId)(id);

    if (type === "input" && inputId) {
      return { inputId: $arkform.useInput(inputId) };
    }

    if (groupId) {
      return $arkform.useGroup(groupId).inputs;
    }

    if (type === "form" && formId) {
      const form = $arkform.useForm(formId);

      let inputs = {
        ...$arkform.useForm(formId).inputs
      };

      if (groupId) {
        for (let [grId, input] of Object.entries(form.groups)) {
          const group = $arkform.useGroup(grId);

          inputs = {
            ...inputs,
            ...group.inputs
          };
        }
      }

      return inputs;
    }

    return {};
  });
}
function getInputIdsFromId(id) {
  const $arkform = useArkForm();

  const { type, formId, groupId, inputId } = (0, _uuid.getIdsFromId)(id);

  if (type === "input" && inputId) {
    return [inputId];
  }

  if (type === "group" && groupId) {
    return Object.keys($arkform.useGroup(groupId).inputs.value);
  }

  if (type === "form" && formId) {
    const form = $arkform.useForm(formId);

    if (!form) return [];

    let ids = [...Object.keys(form.inputs.value)];

    const groupIds = Object.keys(form.groups.value);

    groupIds.forEach((id) => {
      const group = $arkform.useGroup(id);

      ids.push(...Object.keys(group.inputs.value));
    });

    return ids;
  }

  return [];
} /* v9-5b91d2d0cd3b8099 */
