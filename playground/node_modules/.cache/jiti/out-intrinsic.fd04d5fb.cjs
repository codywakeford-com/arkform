"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.intrinsic = void 0;var _scope = require("./scope.js");
var _registry = require("./shared/registry.js");
var _shared = require("./structure/shared.js");
const intrinsicBases = (0, _scope.schemaScope)({
  bigint: "bigint",
  // since we know this won't be reduced, it can be safely cast to a union
  boolean: [{ unit: false }, { unit: true }],
  false: { unit: false },
  never: [],
  null: { unit: null },
  number: "number",
  object: "object",
  string: "string",
  symbol: "symbol",
  true: { unit: true },
  unknown: {},
  undefined: { unit: undefined },
  Array,
  Date
}, { prereducedAliases: true }).export();
_registry.$ark.intrinsic = { ...intrinsicBases };
const intrinsicRoots = (0, _scope.schemaScope)({
  integer: {
    domain: "number",
    divisor: 1
  },
  lengthBoundable: ["string", Array],
  key: ["string", "symbol"],
  nonNegativeIntegerString: { domain: "string", pattern: _shared.arrayIndexSource }
}, { prereducedAliases: true }).export();
// needed to parse index signatures for JSON
Object.assign(_registry.$ark.intrinsic, intrinsicRoots);
const intrinsicJson = (0, _scope.schemaScope)({
  jsonPrimitive: [
  "string",
  "number",
  { unit: true },
  { unit: false },
  { unit: null }],

  jsonObject: {
    domain: "object",
    index: {
      signature: "string",
      value: "$jsonData"
    }
  },
  jsonData: ["$jsonPrimitive", "$jsonObject"]
}, { prereducedAliases: true }).export();
const intrinsic = exports.intrinsic = {
  ...intrinsicBases,
  ...intrinsicRoots,
  ...intrinsicJson,
  emptyStructure: (0, _scope.node)("structure", {}, { prereduced: true })
};
_registry.$ark.intrinsic = { ...intrinsic }; /* v9-45bdf36ae000b1f9 */
