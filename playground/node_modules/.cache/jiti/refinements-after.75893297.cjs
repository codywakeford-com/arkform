"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.AfterNode = exports.After = void 0;var _util = require("@ark/util");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "after",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {
      parse: _range.parseDateLimit,
      serialize: (schema) => schema.toISOString()
    }
  },
  normalize: (0, _range.createDateSchemaNormalizer)("after"),
  defaults: {
    description: (node) => `${node.collapsibleLimitString} or later`,
    actual: _util.describeCollapsibleDate
  },
  intersections: {
    after: (l, r) => l.isStricterThan(r) ? l : r
  }
});
class AfterNode extends _range.BaseRange {
  impliedBasis = _registry.$ark.intrinsic.Date.internal;
  collapsibleLimitString = (0, _util.describeCollapsibleDate)(this.rule);
  traverseAllows = (data) => data >= this.rule;
  reduceJsonSchema(base, ctx) {
    return ctx.fallback.date({ code: "date", base, after: this.rule });
  }
}exports.AfterNode = AfterNode;
const After = exports.After = {
  implementation,
  Node: AfterNode
}; /* v9-75f39c40ea861f53 */
