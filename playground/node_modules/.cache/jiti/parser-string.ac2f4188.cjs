"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.parseUntilFinalizer = exports.parseString = exports.fullStringParse = void 0;var _util = require("@ark/util");
var _dynamic = require("./reduce/dynamic.js");
var _default = require("./shift/operator/default.js");
var _operator = require("./shift/operator/operator.js");
var _scanner = require("./shift/scanner.js");
const parseString = (def, ctx) => {
  const aliasResolution = ctx.$.maybeResolveRoot(def);
  if (aliasResolution)
  return aliasResolution;
  if (def.endsWith("[]")) {
    const possibleElementResolution = ctx.$.maybeResolveRoot(def.slice(0, -2));
    if (possibleElementResolution)
    return possibleElementResolution.array();
  }
  const s = new _dynamic.DynamicState(new _scanner.ArkTypeScanner(def), ctx);
  const node = fullStringParse(s);
  if (s.finalizer === ">")
  (0, _util.throwParseError)((0, _operator.writeUnexpectedCharacterMessage)(">"));
  return node;
};exports.parseString = parseString;
const fullStringParse = (s) => {
  s.parseOperand();
  let result = parseUntilFinalizer(s).root;
  if (!result) {
    return (0, _util.throwInternalError)(`Root was unexpectedly unset after parsing string '${s.scanner.scanned}'`);
  }
  if (s.finalizer === "=")
  result = (0, _default.parseDefault)(s);else
  if (s.finalizer === "?")
  result = [result, "?"];
  s.scanner.shiftUntilNonWhitespace();
  if (s.scanner.lookahead) {
    // throw a parse error if non-whitespace characters made it here without being parsed
    (0, _util.throwParseError)((0, _operator.writeUnexpectedCharacterMessage)(s.scanner.lookahead));
  }
  return result;
};exports.fullStringParse = fullStringParse;
const parseUntilFinalizer = (s) => {
  while (s.finalizer === undefined)
  next(s);
  return s;
};exports.parseUntilFinalizer = parseUntilFinalizer;
const next = (s) => s.hasRoot() ? s.parseOperator() : s.parseOperand(); /* v9-57e125ac5017b996 */
