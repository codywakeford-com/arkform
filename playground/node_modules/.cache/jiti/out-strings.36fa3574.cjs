"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.whitespaceChars = exports.uncapitalize = exports.escapeChar = exports.emojiToUnicode = exports.deanchoredSource = exports.deanchoredRegex = exports.capitalize = exports.anchoredSource = exports.anchoredRegex = exports.RegexPatterns = void 0;const capitalize = (s) => s[0].toUpperCase() + s.slice(1);exports.capitalize = capitalize;
const uncapitalize = (s) => s[0].toLowerCase() + s.slice(1);exports.uncapitalize = uncapitalize;
const anchoredRegex = (regex) => new RegExp(anchoredSource(regex), typeof regex === "string" ? "" : regex.flags);exports.anchoredRegex = anchoredRegex;
const deanchoredRegex = (regex) => new RegExp(deanchoredSource(regex), typeof regex === "string" ? "" : regex.flags);exports.deanchoredRegex = deanchoredRegex;
const anchoredSource = (regex) => {
  const source = typeof regex === "string" ? regex : regex.source;
  return `^(?:${source})$`;
};exports.anchoredSource = anchoredSource;
const deanchoredSource = (regex) => {
  const source = typeof regex === "string" ? regex : regex.source;
  if (source.startsWith("^(?:") && source.endsWith(")$"))
  return source.slice(4, -2);
  return source.slice(source[0] === "^" ? 1 : 0, source.at(-1) === "$" ? -1 : undefined);
};exports.deanchoredSource = deanchoredSource;
const RegexPatterns = exports.RegexPatterns = {
  negativeLookahead: (pattern) => `(?!${pattern})`,
  nonCapturingGroup: (pattern) => `(?:${pattern})`
};
const escapeChar = exports.escapeChar = "\\";
const whitespaceChars = exports.whitespaceChars = {
  " ": 1,
  "\n": 1,
  "\t": 1
};
const emojiToUnicode = (emoji) => emoji.
split("").
map((char) => {
  const codePoint = char.codePointAt(0);
  return codePoint ? `\\u${codePoint.toString(16).padStart(4, "0")}` : "";
}).
join("");exports.emojiToUnicode = emojiToUnicode; /* v9-78ee1187c7cdcd22 */
