"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MaxNode = exports.Max = void 0;var _disjoint = require("../shared/disjoint.js");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "max",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {},
    exclusive: _range.parseExclusiveKey
  },
  normalize: (schema) => typeof schema === "number" ? { rule: schema } : schema,
  defaults: {
    description: (node) => {
      if (node.rule === 0)
      return node.exclusive ? "negative" : "non-positive";
      return `${node.exclusive ? "less than" : "at most"} ${node.rule}`;
    }
  },
  intersections: {
    max: (l, r) => l.isStricterThan(r) ? l : r,
    min: (max, min, ctx) => max.overlapsRange(min) ?
    max.overlapIsUnit(min) ?
    ctx.$.node("unit", { unit: max.rule }) :
    null :
    _disjoint.Disjoint.init("range", max, min)
  },
  obviatesBasisDescription: true
});
class MaxNode extends _range.BaseRange {
  impliedBasis = _registry.$ark.intrinsic.number.internal;
  traverseAllows = this.exclusive ? (data) => data < this.rule : (data) => data <= this.rule;
  reduceJsonSchema(schema) {
    if (this.exclusive)
    schema.exclusiveMaximum = this.rule;else

    schema.maximum = this.rule;
    return schema;
  }
}exports.MaxNode = MaxNode;
const Max = exports.Max = {
  implementation,
  Node: MaxNode
}; /* v9-3500f37953810222 */
