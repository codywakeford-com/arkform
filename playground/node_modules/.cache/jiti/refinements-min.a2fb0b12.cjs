"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MinNode = exports.Min = void 0;var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "min",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {},
    exclusive: _range.parseExclusiveKey
  },
  normalize: (schema) => typeof schema === "number" ? { rule: schema } : schema,
  defaults: {
    description: (node) => {
      if (node.rule === 0)
      return node.exclusive ? "positive" : "non-negative";
      return `${node.exclusive ? "more than" : "at least"} ${node.rule}`;
    }
  },
  intersections: {
    min: (l, r) => l.isStricterThan(r) ? l : r
  },
  obviatesBasisDescription: true
});
class MinNode extends _range.BaseRange {
  impliedBasis = _registry.$ark.intrinsic.number.internal;
  traverseAllows = this.exclusive ? (data) => data > this.rule : (data) => data >= this.rule;
  reduceJsonSchema(schema) {
    if (this.exclusive)
    schema.exclusiveMinimum = this.rule;else

    schema.minimum = this.rule;
    return schema;
  }
}exports.MinNode = MinNode;
const Min = exports.Min = {
  implementation,
  Node: MinNode
}; /* v9-2276ccc78bb75d42 */
