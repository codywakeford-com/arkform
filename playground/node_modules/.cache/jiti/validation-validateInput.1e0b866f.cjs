"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.validateInput = void 0;var _arktype = require("arktype");

var _useArkform = require("../../composables/useArkform");

var _getInputByName = require("../utils/getInputByName");









const validateInput = (P) => {
  const $arkform = (0, _useArkform.useArkForm)();
  const { id } = P;

  const input = $arkform.useInput(id);
  let errors = [];

  if (!input.arkValidators.value?.length) {
    input.arkValidators.value?.push("string>0");
  }

  for (const ark of input.arkValidators.value) {
    const err = getErrorMessages(ark, id);
    errors.push(...err);
  }

  if (input.matches.value) {
    const inputToMatchId = (0, _getInputByName.getInputIdByName)({
      name: input.matches.value,
      id
    });

    const inputToMatch = $arkform.useInput(inputToMatchId);
    if (inputToMatch.value.value !== input.value.value) {
      errors.push(`This field must match the ${input.matches.value} field.`);
    }
  }

  const merged = [...new Set([...input.errors.value, ...errors])];
  const filtered = merged.filter((err) => errors.includes(err));

  input.errors.value.splice(0, input.errors.value.length, ...filtered);
  input.valid.value = filtered.length === 0;
  input.checked.value = true;

  return input.valid.value;
};exports.validateInput = validateInput;

function isArkError(data) {
  return data[" arkKind"] === "errors";
}

function formatArkValidator(arkValidator) {
  if (typeof arkValidator === "string") {
    return arkValidator.replace(" ", "");
  }

  return arkValidator;
}

function getErrorMessages(arkValidator, inputId) {
  const $arkform = (0, _useArkform.useArkForm)();
  arkValidator = formatArkValidator(arkValidator);

  const input = $arkform.useInput(inputId);

  const InputValidator = (0, _arktype.type)(arkValidator);
  const result = InputValidator(input.value.value);

  if (!isArkError(result)) {
    return [];
  }

  const defaultError = result[0].problem.split("(was)")[0];
  const customErrors = (0, _useArkform.useArkForm)()?.config?.errors || {};

  let errors = [];
  let usingCustomError = false;

  for (let [validator, error] of Object.entries(customErrors)) {
    if (validator.replace(" ", "") === arkValidator) {
      errors.push(error);
      usingCustomError = true;
    }
  }

  if (!usingCustomError) {
    errors.push(defaultError);
  }

  return errors;
} /* v9-51e93c34b8d312ba */
