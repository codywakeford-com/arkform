"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _baseDifference = _interopRequireDefault(require("./_baseDifference.js"));
var _baseFlatten = _interopRequireDefault(require("./_baseFlatten.js"));
var _baseRest = _interopRequireDefault(require("./_baseRest.js"));
var _isArrayLikeObject = _interopRequireDefault(require("./isArrayLikeObject.js"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = (0, _baseRest.default)(function (array, values) {
  return (0, _isArrayLikeObject.default)(array) ?
  (0, _baseDifference.default)(array, (0, _baseFlatten.default)(values, 1, _isArrayLikeObject.default, true)) :
  [];
});var _default = exports.default =

difference; /* v9-abdec0a31b97472e */
