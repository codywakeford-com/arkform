"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.ProtoNode = exports.Proto = void 0;var _util = require("@ark/util");
var _disjoint = require("../shared/disjoint.js");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _utils = require("../shared/utils.js");
var _basis = require("./basis.js");
const implementation = (0, _implement.implementNode)({
  kind: "proto",
  hasAssociatedError: true,
  collapsibleKey: "proto",
  keys: {
    proto: {
      serialize: (ctor) => (0, _util.getBuiltinNameOfConstructor)(ctor) ?? (0, _implement.defaultValueSerializer)(ctor)
    },
    dateAllowsInvalid: {}
  },
  normalize: (schema) => {
    const normalized = typeof schema === "string" ? { proto: _util.builtinConstructors[schema] } :
    typeof schema === "function" ?
    (0, _utils.isNode)(schema) ? schema :
    { proto: schema } :
    typeof schema.proto === "string" ?
    { ...schema, proto: _util.builtinConstructors[schema.proto] } :
    schema;
    if (typeof normalized.proto !== "function")
    (0, _util.throwParseError)(Proto.writeInvalidSchemaMessage(normalized.proto));
    if ((0, _util.hasKey)(normalized, "dateAllowsInvalid") && normalized.proto !== Date)
    (0, _util.throwParseError)(Proto.writeBadInvalidDateMessage(normalized.proto));
    return normalized;
  },
  applyConfig: (schema, config) => {
    if (schema.dateAllowsInvalid === undefined &&
    schema.proto === Date &&
    config.dateAllowsInvalid)
    return { ...schema, dateAllowsInvalid: true };
    return schema;
  },
  defaults: {
    description: (node) => node.builtinName ?
    _util.objectKindDescriptions[node.builtinName] :
    `an instance of ${node.proto.name}`,
    actual: (data) => data instanceof Date && data.toString() === "Invalid Date" ?
    "an invalid Date" :
    (0, _util.objectKindOrDomainOf)(data)
  },
  intersections: {
    proto: (l, r) => l.proto === Date && r.proto === Date ?
    // since l === r is handled by default,
    // exactly one of l or r must have allow invalid dates
    l.dateAllowsInvalid ?
    r :
    l :
    (0, _util.constructorExtends)(l.proto, r.proto) ? l :
    (0, _util.constructorExtends)(r.proto, l.proto) ? r :
    _disjoint.Disjoint.init("proto", l, r),
    domain: (proto, domain) => domain.domain === "object" ?
    proto :
    _disjoint.Disjoint.init("domain", _registry.$ark.intrinsic.object.internal, domain)
  }
});
class ProtoNode extends _basis.InternalBasis {
  builtinName = (0, _util.getBuiltinNameOfConstructor)(this.proto);
  serializedConstructor = this.json.proto;
  requiresInvalidDateCheck = this.proto === Date && !this.dateAllowsInvalid;
  traverseAllows = this.requiresInvalidDateCheck ?
  (data) => data instanceof Date && data.toString() !== "Invalid Date" :
  (data) => data instanceof this.proto;
  compiledCondition = `data instanceof ${this.serializedConstructor}${this.requiresInvalidDateCheck ? ` && data.toString() !== "Invalid Date"` : ""}`;
  compiledNegation = `!(${this.compiledCondition})`;
  innerToJsonSchema(ctx) {
    switch (this.builtinName) {
      case "Array":
        return {
          type: "array"
        };
      case "Date":
        return ctx.fallback.date?.({ code: "date", base: {} }) ??
        ctx.fallback.proto({ code: "proto", base: {}, proto: this.proto });
      default:
        return ctx.fallback.proto({
          code: "proto",
          base: {},
          proto: this.proto
        });
    }
  }
  expression = this.dateAllowsInvalid ? "Date | InvalidDate" : this.proto.name;
  get nestableExpression() {
    return this.dateAllowsInvalid ? `(${this.expression})` : this.expression;
  }
  domain = "object";
  get defaultShortDescription() {
    return this.description;
  }
}exports.ProtoNode = ProtoNode;
const Proto = exports.Proto = {
  implementation,
  Node: ProtoNode,
  writeBadInvalidDateMessage: (actual) => `dateAllowsInvalid may only be specified with constructor Date (was ${actual.name})`,
  writeInvalidSchemaMessage: (actual) => `instanceOf operand must be a function (was ${(0, _util.domainOf)(actual)})`
}; /* v9-86b12ff93a6cc0d0 */
