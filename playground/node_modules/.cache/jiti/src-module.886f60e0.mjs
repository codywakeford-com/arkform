"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _kit = await jitiImport("@nuxt/kit");
var _fs = _interopRequireDefault(await jitiImport("fs"));
var _nodeFs = await jitiImport("node:fs");
var _nodePath = await jitiImport("node:path");

var _config = await jitiImport("./runtime/controllers/config.controller");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;}

// Module options TypeScript interface definition
var _default = exports.default =

(0, _kit.defineNuxtModule)({
  meta: {
    name: "arkform",
    configKey: "arkform"
  },

  defaults: {},

  async setup(options, _nuxt) {
    const resolver = (0, _kit.createResolver)("file:///home/cody/git/arkform/src/module.ts");
    await (0, _kit.installModule)("@pinia/nuxt");

    // Give permission for local module //
    _nuxt.options.vite ??= {};
    _nuxt.options.vite.server ??= {};
    _nuxt.options.vite.server.fs ??= {};
    _nuxt.options.vite.server.fs.allow ??= [];
    _nuxt.options.vite.server.fs.allow.push(resolver.resolve(__dirname, ".."));

    // Load arkformConfig
    const arkformConfigPath = resolver.resolve(_nuxt.options.rootDir, "arkform.config.ts");
    const userConfig = await ((specifier) => new Promise((r) => r(`${specifier}`)).then((s) => jitiImport(s).then((m) => _interopRequireWildcard(m))))(arkformConfigPath).then((module) => module.default);

    const $arkformConfig = (0, _config.defineArkformConfig)(userConfig);

    if ($arkformConfig.value.arkfire?.enabled) {
      _nuxt.hook("imports:dirs", (dirs) => {
        dirs.push((0, _nodePath.resolve)(__dirname, "runtime/composables/arkfire")); // /firebase
      });

      (0, _kit.addPlugin)({
        src: resolver.resolve("./runtime/plugins/initFirebase"),
        mode: "all",
        order: -100 // lower runs earlier
      });
    }

    // Setup theme dir
    const themeDir = resolver.resolve(_nuxt.options.rootDir, $arkformConfig?.value?.root || "./arkform");

    if ((0, _nodeFs.existsSync)(themeDir)) {
      addCssFilesFromDir(themeDir, _nuxt);
      addCssFilesFromDir;
      _nuxt.options.watch.push(themeDir);
      _nuxt.options.alias["#arkform-theme"] = themeDir;
    } else {
      console.warn(`[arkform] Theme directory ${themeDir} does not exist.`);
    }

    (0, _kit.addPlugin)({
      src: resolver.resolve("./runtime/plugins/pinia"),
      mode: "all",
      order: -100 // lower runs earlier
    });

    (0, _kit.addComponentsDir)({
      path: resolver.resolve(__dirname, "runtime/components")
    });

    const watchDirs = [resolver.resolve("runtime/composables"), resolver.resolve("runtime/types"), resolver.resolve("runtime/stores"), resolver.resolve("runtime/controllers")];

    for (const dir of watchDirs) {
      _nuxt.options.watch.push(dir);
    }

    (0, _kit.addImportsDir)(watchDirs[0]);
    (0, _kit.addImportsDir)(watchDirs[1]);
    (0, _kit.addImportsDir)(watchDirs[2]);
    (0, _kit.addImportsDir)(watchDirs[3]);

    console.log("\x1b[38;2;255;85;0mðŸ”¥ [arkform] Installed\x1b[0m");
  }
});

function addCssFilesFromDir(directory, _nuxt) {
  const files = _fs.default.readdirSync(directory);

  files.forEach((file) => {
    const filePath = (0, _nodePath.resolve)(directory, file);
    const stat = _fs.default.statSync(filePath);

    // console.log("resolving", filePath)

    if (stat.isDirectory()) {
      addCssFilesFromDir(filePath, _nuxt);
    } else if (file.endsWith(".css") || file.endsWith(".scss")) {
      _nuxt.options.css.push(filePath);
    }
  });
} /* v9-fb1bc65f208bd673 */
