"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.registry = exports.register = exports.isDotAccessible = exports.initialRegistryContents = exports.arkUtilVersion = void 0;var _domain = require("./domain.js");
var _errors = require("./errors.js");
var _isomorphic = require("./isomorphic.js");
var _objectKinds = require("./objectKinds.js");
// Eventually we can just import from package.json in the source itself
// but for now, import assertions are too unstable and it wouldn't support
// recent node versions (https://nodejs.org/api/esm.html#json-modules).
// For now, we assert this matches the package.json version via a unit test.
const arkUtilVersion = exports.arkUtilVersion = "0.46.0";
const initialRegistryContents = exports.initialRegistryContents = {
  version: arkUtilVersion,
  filename: _isomorphic.isomorphic.fileName(),
  FileConstructor: _objectKinds.FileConstructor
};
const registry = exports.registry = initialRegistryContents;
const namesByResolution = new Map();
const nameCounts = Object.create(null);
const register = (value) => {
  const existingName = namesByResolution.get(value);
  if (existingName)
  return existingName;
  let name = baseNameFor(value);
  if (nameCounts[name])
  name = `${name}${nameCounts[name]++}`;else

  nameCounts[name] = 1;
  registry[name] = value;
  namesByResolution.set(value, name);
  return name;
};exports.register = register;
const isDotAccessible = (keyName) => /^[$A-Z_a-z][\w$]*$/.test(keyName);exports.isDotAccessible = isDotAccessible;
const baseNameFor = (value) => {
  switch (typeof value) {
    case "object":{
        if (value === null)
        break;
        const prefix = (0, _objectKinds.objectKindOf)(value) ?? "object";
        // convert to camelCase
        return prefix[0].toLowerCase() + prefix.slice(1);
      }
    case "function":
      return isDotAccessible(value.name) ? value.name : "fn";
    case "symbol":
      return value.description && isDotAccessible(value.description) ?
      value.description :
      "symbol";
  }
  return (0, _errors.throwInternalError)(`Unexpected attempt to register serializable value of type ${(0, _domain.domainOf)(value)}`);
}; /* v9-ea48f264da35dbf7 */
