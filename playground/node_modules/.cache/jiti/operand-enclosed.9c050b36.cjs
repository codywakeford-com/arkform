"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.writeUnterminatedEnclosedMessage = exports.untilLookaheadIsClosing = exports.parseEnclosed = exports.enclosingTokens = exports.enclosingQuote = exports.enclosingChar = void 0;var _util = require("@ark/util");
var _date = require("./date.js");
const parseEnclosed = (s, enclosing) => {
  const enclosed = s.scanner.shiftUntil(untilLookaheadIsClosing[enclosingTokens[enclosing]]);
  if (s.scanner.lookahead === "")
  return s.error(writeUnterminatedEnclosedMessage(enclosed, enclosing));
  // Shift the scanner one additional time for the second enclosing token
  s.scanner.shift();
  if (enclosing === "/") {
    try {
      new RegExp(enclosed);
    }
    catch (e) {
      (0, _util.throwParseError)(String(e));
    }
    s.root = s.ctx.$.node("intersection", {
      domain: "string",
      pattern: enclosed
    }, { prereduced: true });
  } else
  if ((0, _util.isKeyOf)(enclosing, enclosingQuote))
  s.root = s.ctx.$.node("unit", { unit: enclosed });else
  {
    const date = (0, _date.tryParseDate)(enclosed, (0, _date.writeInvalidDateMessage)(enclosed));
    s.root = s.ctx.$.node("unit", { meta: enclosed, unit: date });
  }
};exports.parseEnclosed = parseEnclosed;
const enclosingQuote = exports.enclosingQuote = {
  "'": 1,
  '"': 1
};
const enclosingChar = exports.enclosingChar = {
  "/": 1,
  "'": 1,
  '"': 1
};
const enclosingTokens = exports.enclosingTokens = {
  "d'": "'",
  'd"': '"',
  "'": "'",
  '"': '"',
  "/": "/"
};
const untilLookaheadIsClosing = exports.untilLookaheadIsClosing = {
  "'": (scanner) => scanner.lookahead === `'`,
  '"': (scanner) => scanner.lookahead === `"`,
  "/": (scanner) => scanner.lookahead === `/`
};
const enclosingCharDescriptions = {
  '"': "double-quote",
  "'": "single-quote",
  "/": "forward slash"
};
const writeUnterminatedEnclosedMessage = (fragment, enclosingStart) => `${enclosingStart}${fragment} requires a closing ${enclosingCharDescriptions[enclosingTokens[enclosingStart]]}`;exports.writeUnterminatedEnclosedMessage = writeUnterminatedEnclosedMessage; /* v9-84c12427888343e6 */
