"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.ExactLengthNode = exports.ExactLength = void 0;var _constraint = require("../constraint.js");
var _disjoint = require("../shared/disjoint.js");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _toJsonSchema = require("../shared/toJsonSchema.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "exactLength",
  collapsibleKey: "rule",
  keys: {
    rule: {
      parse: (0, _range.createLengthRuleParser)("exactLength")
    }
  },
  normalize: (schema) => typeof schema === "number" ? { rule: schema } : schema,
  hasAssociatedError: true,
  defaults: {
    description: (node) => `exactly length ${node.rule}`,
    actual: (data) => `${data.length}`
  },
  intersections: {
    exactLength: (l, r, ctx) => _disjoint.Disjoint.init("unit", ctx.$.node("unit", { unit: l.rule }), ctx.$.node("unit", { unit: r.rule }), { path: ["length"] }),
    minLength: (exactLength, minLength) => exactLength.rule >= minLength.rule ?
    exactLength :
    _disjoint.Disjoint.init("range", exactLength, minLength),
    maxLength: (exactLength, maxLength) => exactLength.rule <= maxLength.rule ?
    exactLength :
    _disjoint.Disjoint.init("range", exactLength, maxLength)
  }
});
class ExactLengthNode extends _constraint.InternalPrimitiveConstraint {
  traverseAllows = (data) => data.length === this.rule;
  compiledCondition = `data.length === ${this.rule}`;
  compiledNegation = `data.length !== ${this.rule}`;
  impliedBasis = _registry.$ark.intrinsic.lengthBoundable.internal;
  expression = `== ${this.rule}`;
  reduceJsonSchema(schema) {
    switch (schema.type) {
      case "string":
        schema.minLength = this.rule;
        schema.maxLength = this.rule;
        return schema;
      case "array":
        schema.minItems = this.rule;
        schema.maxItems = this.rule;
        return schema;
      default:
        return _toJsonSchema.ToJsonSchema.throwInternalOperandError("exactLength", schema);
    }
  }
}exports.ExactLengthNode = ExactLengthNode;
const ExactLength = exports.ExactLength = {
  implementation,
  Node: ExactLengthNode
}; /* v9-731934d943bcdb17 */
