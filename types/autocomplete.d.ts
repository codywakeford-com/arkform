export {}

declare global {
    type Prettify<T> = {
        [K in keyof T]: T[K]
    } & {}

    type ArktypeStringKinds =
        | "string"
        | "string.alpha"
        | "string.alphanumeric"
        | "string.base64"
        | "string.base64.url"
        | "string.capitalize"
        | "string.capitalize.preformatted"
        | "string.creditCard"
        | "string.date"
        | "string.date.epoch"
        | "string.date.epoch.parse"
        | "string.date.iso"
        | "string.date.iso.parse"
        | "string.date.parse"
        | "string.digits"
        | "string.email"
        | "string.hex"
        | "string.integer"
        | "string.integer.parse"
        | "string.ip"
        | "string.ip.v4"
        | "string.ip.v6"
        | "string.json"
        | "string.json.parse"
        | "string.lower"
        | "string.lower.preformatted"
        | "string.normalize"
        | "string.normalize.NFC"
        | "string.normalize.NFC.preformatted"
        | "string.normalize.NFD"
        | "string.normalize.NFD.preformatted"
        | "string.normalize.NFKC"
        | "string.normalize.NFKC.preformatted"
        | "string.normalize.NFKD"
        | "string.normalize.NFKD.preformatted"
        | "string.numeric"
        | "string.numeric.parse"
        | "string.regex"
        | "string.semver"
        | "string.trim"
        | "string.trim.preformatted"
        | "string.upper"
        | "string.upper.preformatted"
        | "string.url"
        | "string.url.parse"
        | "string.uuid"
        | "string.uuid.v1"
        | "string.uuid.v2"
        | "string.uuid.v3"
        | "string.uuid.v4"
        | "string.uuid.v5"
        | "string.uuid.v6"
        | "string.uuid.v7"
        | "string.uuid.v8"
    type ArktypeNumberKinds = "number" | "number.Infinity" | "number.NaN" | "number.NegativeInfinity" | "number.epoch" | "number.integer" | "number.safe"
    type Other = "boolean" | "true" | "false" | "number" | "null" | "string" | "object" | "array" | "undefined"
    type Operators = ">" | "<" | "="
    type Numbers = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0"

    type KnownArktype = ArktypeStringKinds | ArktypeNumberKinds | Other
    type ArktypeAutoComplete = LiteralUnion<KnownArktype>
    type LiteralUnion<T extends U, U = string> = T | (U & { _?: never })
}
