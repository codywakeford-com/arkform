"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.BeforeNode = exports.Before = void 0;var _util = require("@ark/util");
var _disjoint = require("../shared/disjoint.js");
var _implement = require("../shared/implement.js");
var _registry = require("../shared/registry.js");
var _range = require("./range.js");
const implementation = (0, _implement.implementNode)({
  kind: "before",
  collapsibleKey: "rule",
  hasAssociatedError: true,
  keys: {
    rule: {
      parse: _range.parseDateLimit,
      serialize: (schema) => schema.toISOString()
    }
  },
  normalize: (0, _range.createDateSchemaNormalizer)("before"),
  defaults: {
    description: (node) => `${node.collapsibleLimitString} or earlier`,
    actual: _util.describeCollapsibleDate
  },
  intersections: {
    before: (l, r) => l.isStricterThan(r) ? l : r,
    after: (before, after, ctx) => before.overlapsRange(after) ?
    before.overlapIsUnit(after) ?
    ctx.$.node("unit", { unit: before.rule }) :
    null :
    _disjoint.Disjoint.init("range", before, after)
  }
});
class BeforeNode extends _range.BaseRange {
  collapsibleLimitString = (0, _util.describeCollapsibleDate)(this.rule);
  traverseAllows = (data) => data <= this.rule;
  impliedBasis = _registry.$ark.intrinsic.Date.internal;
  reduceJsonSchema(base, ctx) {
    return ctx.fallback.date({ code: "date", base, before: this.rule });
  }
}exports.BeforeNode = BeforeNode;
const Before = exports.Before = {
  implementation,
  Node: BeforeNode
}; /* v9-875103e769e6ab3b */
